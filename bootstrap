#!/usr/bin/env bash

set -e


####################
# Hook user dotfiles
####################

if [ ! -r .config/gh/hosts.yml ]; then
	gh auth login
fi
# get the github authenticated name
GH_AUTH_NAME=$(gh auth status | grep -oP 'github.com account \K[^ ]+')
# look for a code block in the README.md of the dotfiles repo
BOOTSTRAP=$(gh api repos/$GH_AUTH_NAME/dotfiles/contents/.github/README.md -H "Accept: application/vnd.github.v3.raw" 2>/dev/null| sed -n '/^```/,/^```/p' | sed '/^```/d');
# let's check one more place
[ -z "$BOOTSTRAP" ] && {
	BOOTSTRAP=$(gh api repos/$GH_AUTH_NAME/dotfiles/contents/README.md -H "Accept: application/vnd.github.v3.raw" 2>/dev/null| sed -n '/^```/,/^```/p' | sed '/^```/d');
}
[ -n "$BOOTSTRAP" ] && {
	bash <<-END
	$BOOTSTRAP
	END
}

############### begin configure-dotfiles
output=$(gh auth status)
scopes_exist=true
required_scopes=("delete_repo" "write:gpg_key" "user")
for scope in "${required_scopes[@]}"; do
    if ! echo "$output" | grep -q "$scope"; then
        scopes_exist=false
        break
    fi
done
if [ "$scopes_exist" = false ]; then
    gh auth refresh --scopes delete_repo,write:gpg_key,user
fi

GH_USER_NAME=$GH_AUTH_NAME
git config --global user.name "$GH_USER_NAME"

GH_USER_EMAIL=$(gh api user/emails --jq '.[] | select(.primary == true) | .email')
git config --global user.email "$GH_USER_EMAIL"

# Fetch GPG keys associated with a specific email domain from GitHub and store them in an array
GPG_KEYS=($(gh gpg-key list | awk '/battelle.org/{print $2}'))

# Initialize a flag to track if a key is found
key_found=false

# Iterate over the keys to check if they are present in the local GPG keyring
for k in "${GPG_KEYS[@]}"; do
	if gpg --list-keys "$k" &> /dev/null; then
		GH_SIGNING_KEY=$k
		key_found=true
		break
	fi
done

# If no key is found, create a new GPG key
if [ "$key_found" = "false" ]; then
	echo "Creating a new GPG key"

	# Create a temporary directory for GPG configuration and key generation logs
	TEMP_DIR=$(mktemp -dq)
	CONFIG_FILE="$TEMP_DIR/key-config"

	# Generate a GPG key configuration file
	cat > "$CONFIG_FILE" <<-EOF
		%echo Generating a basic OpenPGP key
		Key-Type: RSA
		Key-Length: 4096
		Subkey-Type: RSA
		Subkey-Length: 4096
		Name-Real: $GH_USER_NAME
		Name-Email: $GH_USER_EMAIL
		Expire-Date: 0
		%no-protection
		%commit
		%echo Done
	EOF

	# Generate a GPG key using the configuration file
	gpg --batch --generate-key "$CONFIG_FILE" &> $TEMP_DIR/gpg.log

	# Extract the generated key ID from the log
	GH_SIGNING_KEY=$(grep 'key .* marked as ultimately trusted' $TEMP_DIR/gpg.log | awk '{print $3}')

	# Export the public key to a file
	gpg --export --armor "$GH_SIGNING_KEY" > "$TEMP_DIR/pub_key.asc"

	echo "Uploading new key to Github"
	# Upload the new GPG key to GitHub
	gh gpg-key add "$TEMP_DIR/pub_key.asc"
fi

cat <<END

---------------------------
Git
  username: $GH_USER_NAME
  email:    $GH_USER_EMAIL
  key:      $GH_SIGNING_KEY
---------------------------

END

############### end configure-dotfiles

echo -e "\n\tSee $LOGFILE for detailed output"
echo -e "\nFinished!"

exec $@
